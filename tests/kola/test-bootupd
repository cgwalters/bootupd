#!/bin/bash
set -xeuo pipefail

. ${KOLA_EXT_DATA}/libtest.sh

tmpdir=$(mktemp -d)
cd ${tmpdir}
echo "using tmpdir: ${tmpdir}"
touch .testtmp
trap cleanup EXIT
function cleanup () {
  if test -z "${TEST_SKIP_CLEANUP:-}"; then
    if test -f "${tmpdir}"/.testtmp; then
      cd /
      rm "${tmpdir}" -rf
    fi
  else
    echo "Skipping cleanup of ${tmpdir}"
  fi
}

efibasedir=/boot/efi/
ostbaseefi=/usr/lib/ostree-boot/efi/
efisubdir=EFI/fedora
efidir=${efibasedir}/${efisubdir}
ostefi=${ostbaseefi}/${efisubdir}
shim=shimx64.efi

test -f "${efidir}"/${shim}
test -f "${ostefi}"/${shim}

bootupd() {
    runv /usr/libexec/bootupd "$@"
}

# Bootstrap metadata from current tree (assumes we're not used at build time yet)
rpm-ostree usroverlay
/usr/libexec/bootupd generate-update-metadata /
jq . < /usr/share/bootupd/updates/efi/meta.json

# Shouldn't be started by default right now; distributions
# should only enable when it was used at build time.
runv systemctl show bootupd > out.txt
assert_file_has_content_literal out.txt 'ActiveState=inactive'
systemctl start bootupd.socket

bootupd status EFI > out.txt
assert_file_has_content_literal out.txt 'Component EFI'
assert_file_has_content_literal out.txt '  Unmanaged'
assert_not_file_has_content_literal out.txt 'Update: Available'

if bootupd update EFI 2>err.txt; then
  fatal "performed an update without adopting"
fi
assert_file_has_content_literal err.txt 'Component EFI is not tracked and must be adopted before update'
ok 'cannot update without adoption'

bootupd adopt | tee out.txt
assert_file_has_content_literal out.txt "Adopting: EFI"
ok 'adoption'

bootupd adopt | tee out.txt
assert_not_file_has_content_literal out.txt "Adopting: EFI"
assert_file_has_content_literal out.txt "Nothing to do"
ok 'rerunning adopt is idempotent'

cp --reflink=auto ${efidir}/${shim} shimx64.backup
echo 'oops state drift' >> ${efidir}/shimx64.efi
bootupd status EFI | tee out.txt
assert_file_has_content_literal out.txt 'warning: drift detected'
assert_file_has_content_literal out.txt 'Recorded: '
assert_file_has_content_literal out.txt 'Actual: sha512:'
mv shimx64.backup ${efidir}/shimx64.efi
bootupd status EFI | tee out.txt
assert_not_file_has_content_literal out.txt 'warning: drift detected'
ok 'drift detected'

# TODO do better tests that 
rpm-ostree usroverlay

bootupd status EFI | tee out.txt
assert_not_file_has_content_literal out.txt 'Update: Available'
cp --reflink=auto ${ostefi}/${shim} shimx64.efi.backup
echo 'updated shimx64.efi' > ${ostefi}/${shim}
bootupd status EFI | tee out.txt
assert_file_has_content_literal out.txt 'Update: Available'
cp --reflink=auto shimx64.efi.backup ${ostefi}/${shim}
bootupd status EFI | tee out.txt
assert_not_file_has_content_literal out.txt 'Update: Available'
ok 'update available'

bootupd status EFI | tee out.txt
assert_not_file_has_content_literal out.txt 'Update: Available'
cp --reflink=auto ${ostefi}/${shim} shimx64.efi.backup
echo 'updated shimx64.efi' > ${ostefi}/${shim}
bootupd update EFI | tee out.txt
assert_file_has_content_literal out.txt 'EFI: Updated to digest='
assert_not_file_has_content_literal out.txt 'EFI: no updates available'
bootupd status EFI | tee out.txt
assert_not_file_has_content_literal out.txt 'warning: drift detected'
assert_not_file_has_content_literal out.txt 'Update: Available'
if ! test -f "${efidir}/grub.cfg"; then
  fatal "missing unmanaged grub cfg"
fi
ok 'update'

tap_finish
